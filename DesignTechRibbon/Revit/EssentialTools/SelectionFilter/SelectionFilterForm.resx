<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAH/gAAB//gAAf//gAH///gD////B////+8=
</value>
  </data>
</root>